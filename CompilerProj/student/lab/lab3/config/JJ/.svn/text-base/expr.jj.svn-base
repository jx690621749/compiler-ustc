PARSER_BEGIN(ExprParser)
package  edu.ustc.cs.compile.parser.jjexpr;

import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.LinkedList;

import org.eclipse.jdt.core.dom.*;
import edu.ustc.cs.compile.platform.interfaces.ParserInterface;
import edu.ustc.cs.compile.platform.interfaces.ParserException;
import edu.ustc.cs.compile.platform.interfaces.InterRepresent;
import edu.ustc.cs.compile.platform.util.ir.HIR;
import edu.ustc.cs.compile.platform.util.ASTView.core.*;
import edu.ustc.cs.compile.platform.util.ASTView.plugin.*;

public class ExprParser implements ParserInterface {
	private boolean success = false;
    private boolean debug = false;
	
	private AST ast = AST.newAST(AST.JLS3);
    private ASTNode root = null;
    
    public ExprParser(){
    }

	public ASTNode getAST() {
		if (success) {
			return root;
		}
		return null;
	}

    public InterRepresent doParse(File src) throws ParserException {
        try{
            jj_input_stream = new SimpleCharStream(new FileReader(src), 1, 1);
        } catch(Exception e){
            e.printStackTrace();
            throw new ParserException(); 
        }
        token_source = new ExprParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 6; i++) jj_la1[i] = -1;

        try {
			root = sequence();
        } catch (Exception e) {
            System.err.println("Parser Exception.");
            if (debug) {
                e.printStackTrace();
            }
            throw new ParserException();
        }
        
        HIR ir = new HIR();
        ir.setIR(root);
        
        success = true;
        return ir;
	}

	public static void main(String argv[]){
        String srcFileName = "E:/CompilerProj/student/lab/lab3/test/exp_list.txt";  // source file name
        File srcFile = new File(srcFileName);
        ExprParser parser = null;
        try {
        	parser = new ExprParser(new FileReader(srcFileName));
        } catch (Exception e) {
            System.err.println("ParserException");
            e.printStackTrace();
            System.exit(-1);
        }
        HIR ir = null;
        try {
            ir = (HIR)parser.doParse(srcFile);
        } catch (ParserException e) {
            System.err.println("ParserException");
            e.printStackTrace();
            System.exit(-1);
        }
        ASTViewer astviewer = new ASTViewer((ASTNode)ir.getIR(), new GenericPropertyDump());
        astviewer.show();
	}
}
PARSER_END(ExprParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < IDENTIFIER: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < INTEGER_LITERAL: ( ["0"-"9"] )+ >
|
  < LPAREN: "(" >
|
  < RPAREN: ")" >
|
  < SEMICOLON: ";" >
|
  < PLUS: "+" >
|
  < MINUS: "-" >
|
  < MULT: "*" >
|
  < DIV: "/" >
|
  < EQ: "=" >
}

Block sequence() :
{
	Block block;
	LinkedList seq;
	Assignment as;
}
{
	{
		block = ast.newBlock();
		seq = new LinkedList();
	}
	(
		as = assignment( ) ";"
		{
			seq.add(ast.newExpressionStatement(as));
		}
	)*
	<EOF>
	{
	  block.statements().addAll(seq);
	  success = true;
	  return block;
	}
}

Assignment assignment() :
{
	Token id;
	Assignment as;
	Expression e;
}
{
	{
		as = ast.newAssignment();
	}
	id=<IDENTIFIER> <EQ> e=expression()
	{
		as.setLeftHandSide(ast.newSimpleName(id.image));
		as.setOperator(Assignment.Operator.ASSIGN);
		as.setRightHandSide(e);
		return as;
	}
}

Expression expression() :
{
	Expression e, e1,e2;
	InfixExpression ie;
	Token t;
}
{
	e1=term()
	{
		e = e1;
	} 
	(
		{
			e = ie = ast.newInfixExpression();
			ie.setLeftOperand(e1);
		}
		(
			<PLUS>
			{
				ie.setOperator(InfixExpression.Operator.PLUS);
			}
		|
			<MINUS>
			{
				ie.setOperator(InfixExpression.Operator.MINUS);
			}
		)
		e2=term()
		{
			ie.setRightOperand(e2);
			e1=ie;
		}
	)*
	{
		return e;
	}
}

Expression term() :
{
	Expression e1,e2,e;
	InfixExpression ie;
	Token t;
}
{
	e1=factor()
	{
		e = e1;
	} 
	( 
		{
			e = ie = ast.newInfixExpression();
			ie.setLeftOperand(e1);
		}
		(
			<MULT>
			{
				ie.setOperator(InfixExpression.Operator.TIMES);
			}
		|
			<DIV>
			{
				ie.setOperator(InfixExpression.Operator.DIVIDE);
			}
		)
		e2=factor()
		{
			ie.setRightOperand(e2);
			e1 = ie;
		}
	)*
	{
		return e;
	}
}
	
Expression factor() :
{
	Expression e;
	Token t;
}
{
	t=<IDENTIFIER>
	{
		e = ast.newSimpleName(t.image);
		return e;
	}
|	t=<INTEGER_LITERAL>
	{
		e = ast.newNumberLiteral();
		((NumberLiteral)e).setToken(t.image);
		return e;
	}
|	<LPAREN> e=expression() <RPAREN>
	{
		return e;
	}
}